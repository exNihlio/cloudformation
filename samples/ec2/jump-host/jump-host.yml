Mappings:
  Regions:
    us-west-2:
      AMI: "ami-0a634ae95e11c6f91" 
Resources:
  ## Create the VPC here
  JumpHostVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsHostnames: True
      EnableDnsSupport: True
      InstanceTenancy: "default"
      Tags:
        - Key: "Name" 
          Value: "sample-vpc"
  # Creates a simple security group
  JumpHostSecurityGroup:
     Type: "AWS::EC2::SecurityGroup"
     Properties:
       GroupDescription: "Allow SSH access"
       GroupName: "JumpHostSecurityGroup"
       VpcId: 
       # This is literal magic. 'Ref' is an intrinsic function
       # that will populate the values form a logical resource, in this
       # case the 'SampleVPC' described above. Somehow, the Cloudformation
       # API is able to extract the VPC ID out of this. Too much magic
       # if you ask me.
         Ref: "JumpHostVPC"
       SecurityGroupIngress:
         - CidrIp: "0.0.0.0/0"
           FromPort: 22
           ToPort: 22
           IpProtocol: "tcp"
       SecurityGroupEgress:
         - IpProtocol: "-1"
           FromPort: 0
           ToPort: 0
           CidrIp: "0.0.0.0/0"
   # Security group to allow access only from the JumpHost SG
  InternalSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow SSH access from JumpHost SG"
      GroupName: "InternalSecurityGroup"
      VpcId: 
        Ref: "JumpHostVPC"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt [ "JumpHostSecurityGroup", "GroupId" ]
          FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: "0.0.0.0/0"
  NatGatewayEip:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: "Name"
          Value: "NatGatewayEip"
  JumpHostNatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref "JumpHostSubnet"
      AllocationId: !GetAtt [ "NatGatewayEip", "AllocationId" ]
  JumpHostInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "jump-host-igw"
  # Attach the Internet Gateway to our VPC
  JumpHostVPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref "JumpHostInternetGateway"
      VpcId: !Ref "JumpHostVPC"
  JumpHostSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.1.1.0/24"
      AvailabilityZone: "us-west-2a"
      VpcId: !Ref "JumpHostVPC"
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: "sub-pub-usw2a"
  InternalSubA:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.1.2.0/24"
      AvailabilityZone: "us-west-2a"
      VpcId: !Ref "JumpHostVPC"
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: "sub-priv-usw2a"
  InternalSubB:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.1.3.0/24"
      AvailabilityZone: "us-west-2b"
      VpcId: !Ref "JumpHostVPC"
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: "sub-priv-usw2b"
  InternalSubC:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.1.4.0/24"
      AvailabilityZone: "us-west-2c"
      VpcId: !Ref "JumpHostVPC"
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: "sub-priv-usw2c"
  JumpHostRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "JumpHostVPC"
  InternalARouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "JumpHostVPC"
    DependsOn: "JumpHostNatGateway"
  InternalBRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "JumpHostVPC"
  InternalCRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "JumpHostVPC"
  # Create a route that allows access to the access to the internet
  JumpHostRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "JumpHostInternetGateway"
      RouteTableId: !Ref "JumpHostRouteTable"
  # Routes for the three internal subnets
  InternalSubARoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "JumpHostNatGateway"
      RouteTableId: !Ref "InternalARouteTable"
    DependsOn: "JumpHostNatGateway"
  InternalSubBRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "JumpHostNatGateway"
      RouteTableId: !Ref "InternalBRouteTable"
    DependsOn: "JumpHostNatGateway"
  InternalSubCRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "JumpHostNatGateway"
      RouteTableId: !Ref "InternalCRouteTable"
    DependsOn: "JumpHostNatGateway"
  JumpHostSubnetRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "JumpHostRouteTable"
      SubnetId: !Ref "JumpHostSubnet"
  InternalARouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "InternalARouteTable"
      SubnetId: !Ref "InternalSubA"
    DependsOn: "JumpHostNatGateway"
  InternaBRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "InternalBRouteTable"
      SubnetId: !Ref "InternalSubB"
    DependsOn: "JumpHostNatGateway"
  InternalCRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "InternalCRouteTable"
      SubnetId: !Ref "InternalSubC"
    DependsOn: "JumpHostNatGateway"
  # Instance to access the VPC
  JumpHostEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "us-west-2a"
      InstanceType: "t2.micro"
      #EbsOptimized: True
      # The AMI to use
      ImageId: 
        Fn::FindInMap:
          - Regions
          - !Ref AWS::Region
          - AMI
      SecurityGroupIds: 
        - !GetAtt [ "JumpHostSecurityGroup", "GroupId" ]
      SubnetId: !Ref "JumpHostSubnet"
      # Base64 encode the block, which is a cloud-init yaml
      UserData:
        Fn::Base64: |
          #cloud-config
          users:
            - name: sample-cf-user
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              ssh_authorized_keys:
                - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILkFZyn38amsLO4q8H6igxZJEX2i0xDXXpsagGNVv3b3 foobar@gnip.gnop.com
          package_update: true
          packages:
            - vim
            - git
            - ansible
      Tags:
        - Key: "Name"
          Value: "jump-host-1a"
  InternalAEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "us-west-2a"
      InstanceType: "t2.micro"
      #EbsOptimized: True
      # The AMI to use
      ImageId: 
        Fn::FindInMap:
          - Regions
          - !Ref AWS::Region
          - AMI
      SecurityGroupIds: 
        - !GetAtt [ "InternalSecurityGroup", "GroupId" ]
      SubnetId: !Ref "InternalSubA"
      # Base64 encode the block, which is a cloud-init yaml
      UserData:
        Fn::Base64: |
          #cloud-config
          users:
            - name: sample-cf-user
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              ssh_authorized_keys:
                - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILkFZyn38amsLO4q8H6igxZJEX2i0xDXXpsagGNVv3b3 foobar@gnip.gnop.com
          package_update: true
          packages:
            - vim
            - git
            - ansible
      Tags:
        - Key: "Name"
          Value: "internal-host-1a"
  InternalBEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "us-west-2b"
      InstanceType: "t2.micro"
      #EbsOptimized: True
      # The AMI to use
      ImageId: 
        Fn::FindInMap:
          - Regions
          - !Ref AWS::Region
          - AMI
      SecurityGroupIds: 
        - !GetAtt [ "InternalSecurityGroup", "GroupId" ]
      SubnetId: !Ref "InternalSubB"
      # Base64 encode the block, which is a cloud-init yaml
      UserData:
        Fn::Base64: |
          #cloud-config
          users:
            - name: sample-cf-user
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              ssh_authorized_keys:
                - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILkFZyn38amsLO4q8H6igxZJEX2i0xDXXpsagGNVv3b3 foobar@gnip.gnop.com
          package_update: true
          packages:
            - vim
            - git
            - ansible
      Tags:
        - Key: "Name"
          Value: "internal-host-1b"
  InternalCEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "us-west-2c"
      InstanceType: "t2.micro"
      #EbsOptimized: True
      # The AMI to use
      ImageId: 
        Fn::FindInMap:
          - Regions
          - !Ref AWS::Region
          - AMI
      SecurityGroupIds: 
        - !GetAtt [ "InternalSecurityGroup", "GroupId" ]
      SubnetId: !Ref "InternalSubC"
      # Base64 encode the block, which is a cloud-init yaml
      UserData:
        Fn::Base64: |
          #cloud-config
          users:
            - name: sample-cf-user
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              ssh_authorized_keys:
                - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILkFZyn38amsLO4q8H6igxZJEX2i0xDXXpsagGNVv3b3 foobar@gnip.gnop.com
          package_update: true
          packages:
            - vim
            - git
            - ansible
      Tags:
        - Key: "Name"
          Value: "internal-host-1c"
  